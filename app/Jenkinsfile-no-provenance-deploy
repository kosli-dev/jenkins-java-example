pipeline {

    environment {
        KOSLI_ORG = 'kosli-public'
        KOSLI_API_TOKEN = credentials('kosli-api-key')
        DOCKER_PASSWORD = credentials('docker-hub-pat')
        SHORT_SHA = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
    }
    agent any

    stages {
        stage('Checkout') {
            steps {
                // Checkout the code from the repository
                checkout scm
                sh 'pwd'
                sh 'ls -al'
            }
        }
        stage('Build') {
            steps {
                dir('app') {
                    // Run the Gradle build
                    sh './gradlew build'
                    sh 'ls -al app/build/libs'
                }
            }
        }


        stage('Archive') {
            steps {

                // Archive the build artifacts
                archiveArtifacts artifacts: 'app/app/build/libs/*.jar', allowEmptyArchive: false
            }
        }

        // Build and push Docker image
        stage('Docker Build and Push') {
            steps {
                dir('app') {
                    // Build and push the Docker image for linux/amd64 architecture
                    sh "docker login -u meekrosoft -p $DOCKER_PASSWORD"
                    sh "docker buildx create --use || true"
                    sh "docker buildx build --platform linux/amd64 -t meekrosoft/jenkins-java-example:${SHORT_SHA} --load ."
                    sh "docker push meekrosoft/jenkins-java-example:${SHORT_SHA}"
                    sh "docker image inspect meekrosoft/jenkins-java-example:${SHORT_SHA}"
                }
            }
        }
        
        stage('Deploy to Production') {
            steps {
                // Apply the Kubernetes manifests to production
                sh '''
                    kosli snapshot k8s jenkins-java-example-prod -n production

                    aws eks update-kubeconfig --name kosli-demo
                    export KUBECONFIG=/root/.kube/config
                    
                    export IMAGE_TAG=${SHORT_SHA}
                    export IMAGE_NAME=jenkins-java-example
                    envsubst < app/k8s/deployment.yaml | kubectl apply -n production -f -
                    
                    # Wait for deployment to be ready
                    kubectl rollout status deployment/jenkins-java-example -n production

                    kosli snapshot k8s jenkins-java-example-prod -n production

                '''
            }
        }
    }

    post {
        always {
            // Clean up the workspace after the build
            cleanWs()
        }
    }
}