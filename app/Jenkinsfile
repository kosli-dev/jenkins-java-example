pipeline {

    environment {
        KOSLI_ORG = 'kosli-public'
        KOSLI_API_TOKEN = credentials('kosli-api-key')
        SNYK_TOKEN= credentials('snyk-api-token')
        DOCKER_PASSWORD = credentials('docker-hub-pat')
    }
    agent any

    stages {
        stage('Checkout') {
            steps {
                // Checkout the code from the repository
                checkout scm
                sh 'pwd'
                sh 'ls -al'
            }
        }
        stage('Setup') {
            steps {
            // Change to the app directory
                dir('app') {
                    // Run any setup commands here
                    sh 'ls -al'
                    sh 'kosli list envs'
                }
            }
        }
        stage('Build') {
            steps {
                dir('app') {
                    // Run the Gradle build
                    sh './gradlew build'
                    sh 'ls -al app/build/libs'
                }
                sh '''
                        kosli attest artifact app/app/build/libs/app.jar \
	                        --artifact-type file \
	                        --flow jenkins-java-example \
	                        --trail $GIT_COMMIT \
	                        --name jarfile
                    '''
            }
        }

        stage('Test') {
            steps {
                dir('app') {
                    // Run the Gradle tests
                    sh './gradlew test'
                }
            }
        }

        stage('Snyk Scan') {
            steps {
                dir('app') {
                    // Run the Snyk scan
                    sh 'snyk auth $SNYK_TOKEN'
                    sh 'snyk code test --all-projects --org=b6132233-66fe-49e8-a9ba-9d42cea007f1 --sarif-file-output=snyk-code-test.json'
                    sh 'snyk test --all-projects --org=b6132233-66fe-49e8-a9ba-9d42cea007f1'
                    
                }
                sh '''
                    kosli attest snyk \
                        --flow jenkins-java-example \
                        --trail $GIT_COMMIT \
                        --name snyk-scan \
                        --scan-results app/snyk-code-test.json
                ''' 
            }
        }

        stage('Archive') {
            steps {

                // Archive the build artifacts
                archiveArtifacts artifacts: 'app/app/build/libs/*.jar', allowEmptyArchive: false
            }
        }

        // Build and push Docker image
        stage('Docker Build and Push') {
            steps {
                dir('app') {
                    // Build the Docker image
                    sh 'docker build -t jenkins-java-example:latest .'
                    // Push the Docker image to a registry
                    sh 'docker tag jenkins-java-example:latest meekrosoft/jenkins-java-example:latest'
                    sh 'docker login -u meekrosoft -p $DOCKER_PASSWORD'
                    sh 'docker push meekrosoft/jenkins-java-example:latest'
                    sh 'docker image inspect meekrosoft/jenkins-java-example:latest'
                }
                sh '''
                    kosli attest artifact meekrosoft/jenkins-java-example:latest \
                        --artifact-type oci \
                        --flow jenkins-java-example \
                        --trail $GIT_COMMIT \
                        --name docker-image \
                        --registry-username meekrosoft \
                        --registry-password $DOCKER_PASSWORD
                '''
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                // Apply the Kubernetes manifests
                sh '''
                    aws eks update-kubeconfig --name kosli-demo
                    export KUBECONFIG=/root/.kube/config
                    
                    # Deploy the app to the staging environment
                    kubectl apply -f app/k8s/deployment.yaml -n staging
                    
                    # Wait for deployment to be ready
                    kubectl rollout status deployment/jenkins-java-example
                '''
            }
        }
    }

    post {
        always {
            // Clean up the workspace after the build
            cleanWs()
        }
    }
}