pipeline {
    parameters {
        choice(name: 'DEPLOY_ENV', choices: ['staging', 'production'], description: 'Choose environment to deploy')
    }

    environment {
        KOSLI_ORG = 'kosli-public'
        KOSLI_API_TOKEN = credentials('kosli-api-key')
        SNYK_TOKEN = credentials('snyk-api-token')
        DOCKER_PASSWORD = credentials('docker-hub-pat')
        SHORT_SHA = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
        FAKE_TEST_RESULTS = true
        DOCKER_API_VERSION = '1.44'
    }
    agent any

    stages {
        stage('Checkout') {
            steps {
                // Checkout the code from the repository
                checkout scm
                sh 'pwd'
                sh 'ls -al'
            }
        }
        stage('Setup') {
            when {
                expression { params.DEPLOY_ENV == null || params.DEPLOY_ENV == 'staging' }
            }
            steps {
            // Change to the app directory
                dir('app') {
                    // Run any setup commands here
                    sh 'ls -al'
                    sh 'kosli list envs'
                }
            }
        }
        stage('Build') {
            when {
                expression { params.DEPLOY_ENV == null || params.DEPLOY_ENV == 'staging' }
            }
            steps {
                dir('app') {
                    // Run the Gradle build
                    sh './gradlew build'
                    sh 'ls -al app/build/libs'
                }
                sh '''
                        kosli attest artifact app/app/build/libs/app.jar \
	                        --artifact-type file \
	                        --flow jenkins-java-example \
	                        --trail $GIT_COMMIT \
	                        --name jarfile
                    '''
            }
        }

        stage('Test') {
            when {
                expression { params.DEPLOY_ENV == null || params.DEPLOY_ENV == 'staging' }
            }
            steps {
                dir('app') {
                    // Run the Gradle tests
                    sh './gradlew test'
                }
            }
        }

        stage('Fake Test Results') {
            when {
                expression { params.DEPLOY_ENV == null || params.DEPLOY_ENV == 'staging' }
            }
            steps {
                sh '''
                    kosli attest generic \
                        --flow jenkins-java-example \
                        --trail $GIT_COMMIT \
                        --name fake-test-results \
                        --compliant=$FAKE_TEST_RESULTS
                ''' 
            }
        }

        stage('Snyk Scan') {
            when {
                expression { params.DEPLOY_ENV == null || params.DEPLOY_ENV == 'staging' }
            }
            steps {
                dir('app') {
                    // Run the Snyk scan
                    sh 'snyk auth $SNYK_TOKEN'
                    sh 'snyk code test --all-projects --org=b6132233-66fe-49e8-a9ba-9d42cea007f1 --sarif-file-output=snyk-code-test.json'
                    sh 'snyk test --all-projects --org=b6132233-66fe-49e8-a9ba-9d42cea007f1'
                    
                }
                sh '''
                    kosli attest snyk \
                        --flow jenkins-java-example \
                        --trail $GIT_COMMIT \
                        --name snyk-scan \
                        --scan-results app/snyk-code-test.json
                ''' 
            }
        }

        stage('Checkmarx Scan') {
            when {
                expression { params.DEPLOY_ENV == null || params.DEPLOY_ENV == 'staging' }
            }
            steps {
                script {
                    step([
                        $class: 'CxScanBuilder',
                        credentialsId: 'checkmarx-ast-credentials',
                        serverUrl: 'https://deu.ast.checkmarx.net',
                        projectName: 'kosli-dev/jenkins-java-example',
                        sastEnabled: true,
                        preset: 'Default',
                        vulnerabilityThresholdResult: 'FAILURE',
                        waitForResultsEnabled: true
                    ])
                }
            }
        }


        stage('Archive') {
            when {
                expression { params.DEPLOY_ENV == null || params.DEPLOY_ENV == 'staging' }
            }
            steps {

                // Archive the build artifacts
                archiveArtifacts artifacts: 'app/app/build/libs/*.jar', allowEmptyArchive: false
            }
        }

        // Build and push Docker image
        stage('Docker Build and Push') {
            when {
                expression { params.DEPLOY_ENV == null || params.DEPLOY_ENV == 'staging' }
            }
            steps {
                dir('app') {
                    // Build and push the Docker image for linux/amd64 architecture
                    sh "docker login -u meekrosoft -p $DOCKER_PASSWORD"
                    sh "docker buildx create --use || true"
                    sh "docker buildx build --platform linux/amd64 -t meekrosoft/jenkins-java-example:${SHORT_SHA} --load ."
                    sh "docker push meekrosoft/jenkins-java-example:${SHORT_SHA}"
                    sh "docker image inspect meekrosoft/jenkins-java-example:${SHORT_SHA}"
                }
                sh '''
                    kosli attest artifact meekrosoft/jenkins-java-example:${SHORT_SHA} \
                        --artifact-type oci \
                        --flow jenkins-java-example \
                        --trail $GIT_COMMIT \
                        --name docker-image \
                        --registry-username meekrosoft \
                        --registry-password $DOCKER_PASSWORD
                '''
            }
        }

        stage('Assert Artifact') {
            when {
                expression { params.DEPLOY_ENV == null || params.DEPLOY_ENV == 'staging' }
            }
            steps {
                script {
                    def status = sh(script: '''
                        kosli assert artifact meekrosoft/jenkins-java-example:${SHORT_SHA} \
                            --artifact-type docker \
                            --flow jenkins-java-example
                    ''', returnStatus: true)
                    
                    if (status != 0) {
                        error "Kosli artifact assertion failed with status ${status}"
                    }
                }
            }
        }
        
        stage('Deploy to Staging') {
            when {
                expression { params.DEPLOY_ENV == null || params.DEPLOY_ENV == 'staging' }
            }
            steps {
                // Apply the Kubernetes manifests
                sh '''
                    kosli snapshot k8s jenkins-java-example-staging -n staging

                    aws eks update-kubeconfig --name kosli-demo
                    export KUBECONFIG=/root/.kube/config

                    export IMAGE_TAG=${SHORT_SHA}
                    export IMAGE_NAME=jenkins-java-example
                    envsubst < app/k8s/deployment.yaml | kubectl apply -n staging -f -

                    # Wait for deployment to be ready
                    kubectl rollout status deployment/jenkins-java-example -n staging

                    kosli snapshot k8s jenkins-java-example-staging -n staging
                '''
            }
        }
        stage('Deploy to Production') {
            when {
                expression { params.DEPLOY_ENV == 'production' }
            }
            steps {
                // Apply the Kubernetes manifests to production
                sh '''
                    kosli snapshot k8s jenkins-java-example-prod -n production

                    aws eks update-kubeconfig --name kosli-demo
                    export KUBECONFIG=/root/.kube/config
                    
                    export IMAGE_TAG=${SHORT_SHA}
                    export IMAGE_NAME=jenkins-java-example
                    envsubst < app/k8s/deployment.yaml | kubectl apply -n production -f -
                    
                    # Wait for deployment to be ready
                    kubectl rollout status deployment/jenkins-java-example -n production

                    kosli snapshot k8s jenkins-java-example-prod -n production
                '''
            }
        }
    }

    post {
        always {
            // Clean up the workspace after the build
            cleanWs()
        }
    }
}